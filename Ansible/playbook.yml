---
- name: Grant root privileges to ansible user
  hosts: master
  become: true

  tasks:
    - name: Ensure sudo package is installed
      apt:
        name: sudo
        state: present

    - name: Add ansible user to sudo group
      user:
        name: ansible
        groups: sudo
        append: yes

    - name: Ensure sudoers file is configured correctly
      copy:
        content: "ansible ALL=(ALL) NOPASSWD: ALL"
        dest: /etc/sudoers.d/ansible
        owner: root
        group: root
        mode: '0440'
      notify:
        - reload sudoers

  handlers:
    - name: reload sudoers
      command: sudo visudo -c

- name: Update 
  hosts: master
  become: true

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 86400
      become: yes
    - name: Install dependencies
      apt:  
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add PostgreSQL APT repository key
      apt_key:
        url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
        state: present

    - name: Add PostgreSQL APT repository
      apt_repository:
        repo: deb https://apt.postgresql.org/pub/repos/apt/ {{ ansible_distribution_release }}-pgdg main
        state: present

    - name: Update apt cache again
      apt:
        update_cache: yes


- name: Configure PostgreSQL
  hosts: master
  become: true
  vars_files:
    - secrets.yml

  tasks:
    - name: Install PostgreSQL
      apt:
        name: 
          - postgresql-16
          - postgresql-contrib
          - libpq-dev
        state: present
        update_cache: yes

    - name: Ensure PostgreSQL is started and enabled at boot
      service:
        name: postgresql
        state: started
        enabled: yes
    
    - name: Create oracle/pg_data/archive directory
      file:
        path: /oracle/pg_data/archive
        state: directory

    - name: Chown oracle directory
      file:
        path: /oracle/pg_data/archive/
        owner: "{{ all.vars.DB_USER }}"
        group: "{{ all.vars.DB_USER }}"
        recurse: true

    - name: Configure postgresql.conf
      become_user: "{{ all.vars.DB_USER }}"
      blockinfile:
        path: /etc/postgresql/16/main/postgresql.conf
        block: |
          listen_addresses = '*'
          port = {{ all.vars.DB_PORT }}
          archive_mode = on
          archive_command = 'cp %p /oracle/pg_data/archive/%f'
          max_wal_senders=10
          wal_level=replica
          wal_log_hints = on
          hot_standby=on
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on
    
    - name: Configure pg_hba.conf 
      become_user: "{{ all.vars.DB_USER }}"
      blockinfile:
        path: /etc/postgresql/16/main/pg_hba.conf
        block: |
         local all {{ all.vars.DB_USER }} peer
         host all all 0.0.0.0/0 md5
         host replication {{ all.vars.DB_REPL_USER }} {{ all.vars.DB_REPL_HOST}}/32 scram-sha-256 

    - name: Restart PostgreSQL
      service:
        name: postgresql
        state: restarted  
       
    - name : Create copy of init.sql
      copy: 
        src: init.sql
        dest: /tmp/init.sql

    - name : Change ownership of init.sql
      file:
        path: /tmp/init.sql
        owner: "{{ all.vars.DB_USER }}"
        group: "{{ all.vars.DB_USER }}"
        mode: "0644"

    - name: Change database variables in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_DATABASE"
        replace: "{{ all.vars.DB_DATABASE }}"

    - name: Change user variables in init.sql
      replace:
        path: /tmp/init.sql
        regexp: "DB_USER"
        replace: "{{ all.vars.DB_USER }}"

    - name: Execute init.sql
      command: psql -a -f /tmp/init.sql
      become: true
      become_user: "{{ all.vars.DB_USER }}"